{"version":3,"sources":["componentes/Cargando.js","variables/Variable.js","paginas/clientes/componentes/ClienteForm.js","paginas/clientes/componentes/ClienteFila.js","paginas/clientes/componentes/ClientesTabla.js","paginas/clientes/Clientes.js","servicios/RepartidorService.js","servicios/ClienteService.js","servicios/ProductosService.js","paginas/pedidos/componentes/PedidoForm.js","paginas/pedidos/componentes/PedidosFila.js","paginas/pedidos/componentes/PedidosTabla.js","paginas/pedidos/Pedidos.js","paginas/repartidores/componentes/RepartidorFila.js","paginas/repartidores/componentes/RepartidoresTabla.js","paginas/repartidores/componentes/RepartidorForm.js","paginas/repartidores/Repartidores.js","paginas/productos/componentes/ProductoFila.js","paginas/productos/componentes/ProductosTabla.js","paginas/productos/componentes/ProductoForm.js","paginas/productos/Productos.js","paginas/home/Home.js","componentes/Header.js","App.js","serviceWorker.js","index.js"],"names":["Cargando","tipo","texto","claseAlerta","className","role","URL_BACKEND","ClienteForm","getClientes","setObjCliente","objCliente","formVacio","cli_nom","cli_ape","cli_est","cli_dni","useState","formulario","setFormulario","useEffect","console","log","handleChange","e","target","name","value","onSubmit","preventDefault","trim","Swal","fire","icon","title","text","showCancelButton","then","result","nuevoCliente","endpoint","id","fetch","method","headers","body","JSON","stringify","response","json","data","timer","putCliente","postCliente","htmlFor","type","onChange","ClienteFila","cliente","numero","checked","setChecked","onClick","ClientesTabla","clientes","map","i","key","Clientes","cargando","setCargando","setClientes","RepartidorService","Promise","resolve","reject","repartidores","ClienteService","this","ProductoService","productos","formularioVacio","id_pro","id_rep","id_cli","ped_ini","ped_fin","ped_est","ped_fecha","PedidoForm","objPedido","setObjPedido","getPedidos","setRepartidores","setProductos","repService","cliService","prodService","llenarSelects","a","getAllRepartidores","getAllClientes","getAllProductos","nuevoPedido","putPedido","postPedido","producto","pro_nom","pro_pre","repartidor","rep_nom","rep_ape","PedidoFila","pedido","PedidosTabla","pedidos","Pedidos","setPedidos","RepartidorFila","setObjRepartidor","rep_est","nuevoRepartidor","rep_dni","RepartidoresTabla","RepartidorForm","getRepartidores","objRepartidor","putRepartidor","postRepartidor","Repartidores","ProductoFila","setObjProducto","pro_est","nuevoProducto","ProductosTabla","ProductoForm","getProductos","objProducto","putProducto","postProducto","Productos","Home","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32f703d7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cargando = ({tipo,texto}) => {\r\n\r\n\r\n    let claseAlerta = \"\";\r\n    switch (tipo) {\r\n        case \"success\":\r\n            claseAlerta = \"alert alert-success text-center\";\r\n            break;\r\n        case \"danger\":\r\n            claseAlerta = \"alert alert-danger text-center\";\r\n            break;\r\n        case \"warning\":\r\n            claseAlerta = \"alert alert-warning text-center\";\r\n            break;\r\n        case \"info\":\r\n            claseAlerta = \"alert alert-info text-center\";\r\n            break;\r\n        default:\r\n            claseAlerta = \"alert alert-light text-center\";\r\n            break;\r\n    }\r\n    return (\r\n        <div className={claseAlerta} role=\"alert\">\r\n            <h4 className=\"alert-heading\">Cargando</h4>\r\n            <p>{texto}</p>\r\n            <p className=\"mb-0\"></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cargando\r\n","export const URL_BACKEND = `https://5ec86498155c130016a909dd.mockapi.io`;","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\nconst ClienteForm = ({ getClientes, setObjCliente, objCliente }) => {\r\n    let formVacio = {\r\n        cli_nom: '',\r\n        cli_ape: '',\r\n        cli_est: '',\r\n        cli_dni: ''\r\n    };\r\n\r\n    const [formulario, setFormulario] = useState({});\r\n\r\n    useEffect(() => {\r\n        console.log(\"efecto objCliente\");\r\n        if (objCliente) {\r\n            setFormulario(objCliente);\r\n        } else {\r\n            setFormulario(formVacio)\r\n        }\r\n    }, [objCliente])\r\n\r\n    // console.log(\"state form\", formulario);\r\n\r\n    const handleChange = (e) => {\r\n        setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n\r\n    }\r\n    // console.log(formulario);\r\n\r\n\r\n    //crear nuevo Repartidor\r\n    const postCliente = (nuevoCliente) => {\r\n        const endpoint = `${URL_BACKEND}/cliente`;\r\n        fetch(endpoint, {\r\n            method: 'POST',\r\n            body: JSON.stringify(nuevoCliente),\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            }\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                Swal.fire({\r\n                    title: 'Éxito!',\r\n                    icon: 'success',\r\n                    text: 'El Cliente ha sido creado con éxito en la base de datos',\r\n                    timer: 2000,\r\n                });\r\n                getClientes();\r\n            })\r\n        })\r\n    }\r\n\r\n    // actualizando un clienre\r\n    const putCliente = (nuevoCliente) => {\r\n        const endpoint = `${URL_BACKEND}/cliente/${objCliente.id}`;\r\n        fetch(endpoint, {\r\n            method: 'PUT',\r\n            headers: { \"Content-type\": \"application/json\" },\r\n            body: JSON.stringify(nuevoCliente)\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                Swal.fire({\r\n                    title: \"Actualizado!\",\r\n                    text: \"Registro actualizado correctamente\",\r\n                    icon: \"success\",\r\n                    timer: 1500\r\n                });\r\n                // limpiar el form\r\n                getClientes();\r\n                setObjCliente(null);\r\n            })\r\n        })\r\n    }\r\n    //ENVIANDO NUEVO REPARTIDOR PARA SU CREACION\r\n    const enviarFormulario = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (formulario.cli_nom.trim() === \"\" ||\r\n            formulario.cli_ape.trim() === \"\" ||\r\n            formulario.cli_dni.trim() === \"\" ||\r\n            formulario.cli_est.trim() === \"\") {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Cuidado!\",\r\n                text: \"Todos los campos deben estar llenos\"\r\n            });\r\n        } else {\r\n            if (objCliente) {\r\n                // tengo editar el registro\r\n                // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n                Swal.fire({\r\n                    title: '¿Seguro que desea editar el registro?',\r\n                    icon: 'info',\r\n                    text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                    showCancelButton: true\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        console.log(\"OK PODEMOS EDITAR AL  CLIENTE\");\r\n                        putCliente(formulario);\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                //tengo crear el registro\r\n                Swal.fire({\r\n                    title: '¿Seguro que desea crear el registro?',\r\n                    icon: 'info',\r\n                    text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                    showCancelButton: true\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                        // stuff PARA CREAR AL USUARIO\r\n                        // aqui hacemos un POST  a mockapi\r\n                        postCliente(formulario);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <div className=\"card\">\r\n            <div className=\"card-header\">\r\n                <h3 className=\"card-title\">Registrar Cliente</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <form className=\"row\" onSubmit={enviarFormulario}>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Nombre:</label>\r\n                        <input type=\"text\" name=\"cli_nom\" className=\"form-control\" onChange={handleChange} value={formulario.cli_nom} />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Apellido:</label>\r\n                        <input type=\"text\" name=\"cli_ape\" className=\"form-control\" onChange={handleChange} value={formulario.cli_ape} />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Estado:</label>\r\n                        <select className=\"form-control\" name=\"cli_est\" onChange={handleChange} value={formulario.cli_est}>\r\n                            <option value=\"\">-Seleccione-</option>\r\n                            <option value=\"true\">Habilitado</option>\r\n                            <option value=\"false\">Inhabilitado</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Dni:</label>\r\n                        <input type=\"text\" name=\"cli_dni\" className=\"form-control\" onChange={handleChange} value={formulario.cli_dni} />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"form-group col-md-6\">\r\n                        {objCliente ?\r\n                            <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                                Actualizar Cliente\r\n                             </button> :\r\n                            <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                Crear Cliente\r\n                             </button>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group col-md-6\">\r\n                        <button className=\"btn btn-danger btn-block\" type=\"submit\">\r\n                            Cancelar\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ClienteForm\r\n","import React, {useEffect, useState} from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\n\r\nconst ClienteFila = ({cliente, numero, setObjCliente}) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const putCliente = () => {\r\n\r\n        let nuevoCliente = { ...cliente };\r\n        // Al nuevo cliente le colocamos el estado contrario\r\n        // al que tiene en el componente actualmente,\r\n        // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n        // cli_est => mandamos la negacion del estado actual\r\n        // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n        // contemplando\r\n        nuevoCliente.cli_est = !checked + \"\";\r\n    \r\n        const endpoint = `${URL_BACKEND}/cliente/${cliente.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(nuevoCliente)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            console.log(data);\r\n    \r\n            // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n            // ESTADO EN LA BD\r\n            // En consecuencia, ya podemos hacer el cambio de estao local\r\n            // lo que generará un cambio visual para que el usuario\r\n            // vea el DOM actualizado.\r\n            setChecked(!checked);\r\n          })\r\n        })\r\n      }\r\n    \r\n    \r\n      useEffect(() => {\r\n        if (cliente.cli_est === \"true\") {\r\n          setChecked(true);\r\n        }\r\n      }, []);\r\n    return (\r\n        <tr>\r\n        <td>{numero}</td>\r\n        <td>{cliente.id}</td>\r\n        <td>{cliente.cli_nom}</td>\r\n        <td>{cliente.cli_ape}</td>\r\n        <td>\r\n          {\r\n            checked ?\r\n              <span className=\"badge badge-success\">Habilitado</span> :\r\n              <span className=\"badge badge-danger\">Inhabilitado</span>\r\n          }\r\n          <Switch\r\n            checked={checked}\r\n            onChange={putCliente} />\r\n  \r\n        </td>\r\n        <td>{cliente.cli_dni}</td>\r\n        <td>\r\n        {/* <button className=\"btn btn-info\">Editar</button> */}\r\n          <button className=\"btn btn-info\" onClick={() => {\r\n            setObjCliente(cliente);\r\n          }}>\r\n            Editar\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default ClienteFila\r\n","import React from 'react'\r\n// import RepartidorFila from './ClienteFila'\r\nimport ClienteFila from './ClienteFila'\r\n\r\nconst ClientesTabla = ({clientes, setObjCliente}) => {\r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          clientes.map((cliente, i) => {\r\n          return <ClienteFila numero={i}\r\n            cliente={cliente}\r\n            key={cliente.id}\r\n            setObjCliente={setObjCliente} />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default ClientesTabla\r\n","import React, { useEffect, useState, Fragment } from 'react'\r\nimport Cargando from '../../componentes/Cargando';\r\n// import RepartidoresTabla from './componentes/RepartidoresTabla';\r\n// import RepartidorForm from './componentes/RepartidorForm';\r\nimport ClienteForm from './componentes/ClienteForm';\r\nimport ClientesTabla from './componentes/ClientesTabla';\r\n\r\nexport const Clientes = () => {\r\n\r\n    const endpoint = \"https://5ec86498155c130016a909dd.mockapi.io/cliente\";\r\n    const [cargando, setCargando] = useState(true);\r\n    const [clientes, setClientes] = useState([]);\r\n\r\n    const [objCliente, setObjCliente] = useState(null);\r\n\r\n    const getClientes = () => {\r\n        if (!cargando) {\r\n            setCargando(true);\r\n        }\r\n        fetch(endpoint).then((response) => {\r\n            response.json().then((data) => {\r\n                setCargando(false);\r\n                setClientes(data);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getClientes();\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-8\">\r\n                    <ClienteForm getClientes={getClientes} objCliente={objCliente} setObjCliente={setObjCliente}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-8\">\r\n                    {\r\n                        cargando === true ?\r\n                            <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n                            <ClientesTabla clientes={clientes} \r\n                            setObjCliente={setObjCliente}/>\r\n                            \r\n                    }\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n","import { URL_BACKEND } from \"../variables/Variable\";\r\n\r\n// import { URL_BACKEND } from './../variables/variables';\r\nexport class RepartidorService {\r\n endpoint = \"/repartidor\";\r\n /**\r\n  * Funcion que trae toooooooodos los repartidores\r\n  */\r\n getAllRepartidores() {\r\n  return new Promise((resolve, reject) => {\r\n   fetch(`${URL_BACKEND}${this.endpoint}`)\r\n    .then((response) => {\r\n     response.json().then((repartidores) => {\r\n      resolve(repartidores);\r\n     })\r\n    })\r\n  })\r\n }\r\n\r\n}","// import { URL_BACKEND } from \"../variables/Variable\";\r\n\r\nimport { URL_BACKEND } from \"../variables/Variable\";\r\n\r\nexport class ClienteService {\r\n endpoint = '/cliente';\r\n  async getAllClientes() {\r\n  let response = await fetch(`${URL_BACKEND}${this.endpoint}`);\r\n  let clientes = await response.json();\r\n  // OJO, la funcion, por ser ASYNC, no retorna \r\n  // la lista de clientes, retorna una promesa\r\n  return clientes;\r\n   // .then((response) => {\r\n   //  response.json().then((clientes) => {\r\n   //   resolve(clientes);\r\n   //  })\r\n   // })\r\n }\r\n}","// import { URL_BACKEND } from \"../variables/variables\";\r\n\r\nimport { URL_BACKEND } from \"../variables/Variable\";\r\n\r\nexport class ProductoService {\r\n endpoint = \"/producto\";\r\n async getAllProductos() {\r\n  let response = await fetch(`${URL_BACKEND}${this.endpoint}`);\r\n  let productos = await response.json();\r\n  return productos;\r\n }\r\n}","import React, { useState, useEffect } from 'react'\r\n// import { RepartidorService } from '../../../servicios/RepartidorService';\r\n// import { ClienteService } from '../../../servicios/ClienteService';\r\n// import { ProductoService } from '../../../servicios/ProductosService';\r\nimport { RepartidorService } from '../../../servicios/RepartidorService';\r\nimport { ClienteService } from '../../../servicios/ClienteService';\r\nimport { ProductoService } from '../../../servicios/ProductosService';\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst formularioVacio = {\r\n  id_pro: \"\",\r\n  id_rep: \"\",\r\n  id_cli: \"\",\r\n  ped_ini: \"\",\r\n  ped_fin: \"\",\r\n  ped_est: \"\",\r\n  ped_fecha: \"\"\r\n}\r\n\r\nconst PedidoForm = (objPedido, setObjPedido, getPedidos) => {\r\n\r\n  const [formulario, setFormulario] = useState({});\r\n  const [repartidores, setRepartidores] = useState([]);\r\n  const [clientes, setClientes] = useState([]);\r\n  const [productos, setProductos] = useState([]);\r\n\r\n  let repService = new RepartidorService();\r\n  let cliService = new ClienteService();\r\n  let prodService = new ProductoService();\r\n\r\n\r\n  useEffect(() => {\r\n    llenarSelects();\r\n   \r\n}, [])\r\n  useEffect(() => {\r\n    // llenarSelects();\r\n    console.log(\"efecto objPedido\");\r\n    if (objPedido) {\r\n        setFormulario(objPedido);\r\n    } else {\r\n        setFormulario(formularioVacio)\r\n    }\r\n}, [objPedido])\r\n\r\n  const handleChange = (e) => {\r\n    setFormulario({\r\n      ...formulario,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  const llenarSelects = async () => {\r\n\r\n    setRepartidores(await repService.getAllRepartidores());\r\n    setClientes(await cliService.getAllClientes());\r\n    setProductos(await prodService.getAllProductos());\r\n    \r\n    // let arrayRepartidores = await repService.getAllRepartidores();\r\n    // setRepartidores(arrayRepartidores);\r\n    // let arrayClientes = await cliService.getAllClientes();\r\n    // setClientes(arrayClientes);\r\n    // let arrayProductos = await prodService.getAllProductos()\r\n    // setProductos(arrayProductos);\r\n  }\r\n\r\n \r\n\r\n\r\n   //crear nuevo Pedido\r\n   const postPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido`;\r\n    fetch(endpoint, {\r\n        method: 'POST',\r\n        body: JSON.stringify(nuevoPedido),\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }).then((response) => {\r\n        response.json().then((data) => {\r\n            Swal.fire({\r\n                title: 'Éxito!',\r\n                icon: 'success',\r\n                text: 'El Pedido ha sido creado con éxito en la base de datos',\r\n                timer: 2000,\r\n            });\r\n            getPedidos();\r\n        })\r\n    })\r\n}\r\n\r\n// actualizando un repartidor\r\nconst putPedido = (nuevoPedido) => {\r\n    const endpoint = `${URL_BACKEND}/pedido/${objPedido.id}`;\r\n    fetch(endpoint, {\r\n        method: 'PUT',\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify(nuevoPedido)\r\n    }).then((response) => {\r\n        response.json().then((data) => {\r\n            Swal.fire({\r\n                title: \"Actualizado!\",\r\n                text: \"Registro actualizado correctamente\",\r\n                icon: \"success\",\r\n                timer: 1500\r\n            });\r\n            // limpiar el form\r\n            getPedidos();\r\n            setObjPedido(null);\r\n        })\r\n    })\r\n}\r\n\r\n\r\n  //ENVIANDO NUEVO REPARTIDOR PARA SU CREACION\r\n  const enviarFormulario = (e) => {\r\n    e.preventDefault()\r\n\r\n \r\n    if (formulario.id_pro.trim() === \"\" ||\r\n        formulario.id_rep.trim() === \"\" ||\r\n        formulario.id_cli.trim() === \"\" ||\r\n        formulario.ped_ini.trim() === \"\"||\r\n        formulario.ped_fin.trim() === \"\"||\r\n        formulario.ped_est.trim() === \"\"||\r\n        formulario.ped_fecha.trim() === \"\") {\r\n        Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Cuidado!\",\r\n            text: \"Todos los campos deben estar llenos\"\r\n        });\r\n    } else {\r\n        if (objPedido) {\r\n            // tengo editar el registro\r\n            // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n            Swal.fire({\r\n                title: '¿Seguro que desea editar el registro?',\r\n                icon: 'info',\r\n                text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                showCancelButton: true\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    console.log(\"OK PODEMOS EDITAR AL PEDIDO\");\r\n                    putPedido(formulario);\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            //tengo crear el registro\r\n            Swal.fire({\r\n                title: '¿Seguro que desea crear el registro?',\r\n                icon: 'info',\r\n                text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                showCancelButton: true\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                    // stuff PARA CREAR AL USUARIO\r\n                    // aqui hacemos un POST  a mockapi\r\n                    postPedido(formulario);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n}\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">\r\n            <h3 className=\"card-title\">Formulario de Pedidos</h3>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <form className=\"row\" onSubmit={enviarFormulario}>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Producto</label>\r\n                <select name=\"id_pro\"\r\n                  onChange={handleChange} value={formulario.id_pro}\r\n                  id=\"\" className=\"form-control\">\r\n                  {\r\n                    productos.map((producto) => {\r\n                      return (<option value={producto.id} key={producto.id}>\r\n                        {producto.pro_nom} | S/.{producto.pro_pre}\r\n                      </option>)\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Repartidor</label>\r\n                <select name=\"id_rep\"\r\n                  onChange={handleChange} value={formulario.id_rep}\r\n                  id=\"\" className=\"form-control\">\r\n\r\n                  {\r\n                    repartidores.map((repartidor) => {\r\n                      return (<option value={repartidor.id} key={repartidor.id}>\r\n                        {repartidor.rep_nom} {repartidor.rep_ape}\r\n                      </option>)\r\n                    })\r\n                  }\r\n\r\n\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Seleccione Cliente</label>\r\n                <select name=\"id_cli\"\r\n                  onChange={handleChange}\r\n                  value={formulario.id_cli}\r\n                  id=\"\" className=\"form-control\">\r\n                  {\r\n                    clientes.map((cliente) => {\r\n                      return (<option value={cliente.id} key={cliente.id}>\r\n                        {cliente.cli_nom} {cliente.cli_ape}\r\n                      </option>)\r\n                    })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Entrega Inicio</label>\r\n                <input type=\"text\" name=\"ped_ini\"\r\n                  onChange={handleChange} value={formulario.ped_ini}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Entrega Fin</label>\r\n                <input type=\"text\" name=\"ped_fin\"\r\n                  onChange={handleChange} value={formulario.ped_fin}\r\n                  className=\"form-control\" />\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Estado</label>\r\n                <select name=\"ped_est\" onChange={handleChange}\r\n                  id=\"\" className=\"form-control\" value={formulario.ped_est}>\r\n                  <option value=\"\">Seleccione</option>\r\n                  <option value=\"true\">Solicitado</option>\r\n                  <option value=\"false\">Realizado</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3\">\r\n                <label htmlFor=\"\">Fecha</label>\r\n                <input type=\"date\" name=\"ped_fecha\"\r\n                  onChange={handleChange} value={formulario.ped_fecha}\r\n                  className=\"form-control\" />\r\n              </div>\r\n\r\n              <div className=\"form-group col-md-6\">\r\n                        {objPedido ?\r\n                            <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                                Actualizar Pedido\r\n                             </button> :\r\n                            <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                Crear Pedido\r\n                             </button>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group col-md-6\">\r\n                        <button className=\"btn btn-danger btn-block\" type=\"submit\">\r\n                            Cancelar\r\n                        </button>\r\n                    </div>\r\n\r\n            </form>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PedidoForm\r\n","import React, {useEffect, useState} from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\n\r\nconst PedidoFila = ({pedido, numero, setObjPedido}) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const putPedido = () => {\r\n\r\n        let nuevoPedido = { ...pedido };\r\n        // Al nuevo repartidor le colocamos el estado contrario\r\n        // al que tiene en el componente actualmente,\r\n        // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n        // rep_est => mandamos la negacion del estado actual\r\n        // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n        // contemplando\r\n        nuevoPedido.ped_est = !checked + \"\";\r\n    \r\n        const endpoint = `${URL_BACKEND}/pedido/${pedido.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(nuevoPedido)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            console.log(data);\r\n    \r\n            // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n            // ESTADO EN LA BD\r\n            // En consecuencia, ya podemos hacer el cambio de estao local\r\n            // lo que generará un cambio visual para que el usuario\r\n            // vea el DOM actualizado.\r\n            setChecked(!checked);\r\n          })\r\n        })\r\n      }\r\n    \r\n    \r\n      useEffect(() => {\r\n        if (pedido.ped_est === \"true\") {\r\n          setChecked(true);\r\n        }\r\n      }, []);\r\n\r\n\r\n      // <th><strong>#</strong></th>\r\n      // <th>Id</th>\r\n      // <th>Id Producto</th>\r\n      // <th>Id Repartidor</th>\r\n      // <th>Id Cliente</th>\r\n      // <th>Pedido Inicio</th>\r\n      // <th>Pedido Final</th>\r\n      // <th>Estado de Pedido</th>\r\n      // <th>Fecha de Pedido</th>\r\n      // <th>Acciones</th>\r\n    return (\r\n        <tr>\r\n        <td>{numero}</td>\r\n        <td>{pedido.id}</td>\r\n        <td>{pedido.id_pro}</td>\r\n        <td>{pedido.id_rep}</td>\r\n        <td>{pedido.id_cli}</td>\r\n        <td>{pedido.ped_ini}</td>\r\n        <td>{pedido.ped_fin}</td>\r\n        <td>\r\n          {\r\n            checked ?\r\n              <span className=\"badge badge-success\">Solicitado</span> :\r\n              <span className=\"badge badge-warning\">Realizado</span>\r\n          }\r\n          <Switch\r\n            checked={checked}\r\n            onChange={putPedido} />\r\n  \r\n        </td>\r\n        <td>{pedido.ped_fecha}</td>\r\n        <td>\r\n        {/* <button className=\"btn btn-info\">Editar</button> */}\r\n          <button className=\"btn btn-info\" onClick={() => {\r\n            setObjPedido(pedido);\r\n          }}>\r\n            Editar\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default PedidoFila\r\n","import React from 'react'\r\n// import RepartidorFila from './RepartidorFila'\r\nimport PedidoForm from './PedidoForm'\r\nimport PedidoFila from './PedidosFila'\r\n\r\nconst PedidosTabla = ({pedidos, setObjPedido}) => {\r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>  \r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Id Producto</th>\r\n          <th>Id Repartidor</th>\r\n          <th>Id Cliente</th>\r\n          <th>Pedido Inicio</th>\r\n          <th>Pedido Final</th>\r\n          <th>Estado de Pedido</th>\r\n          <th>Fecha de Pedido</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          pedidos.map((pedido, i) => {\r\n            return <PedidoFila numero={i}\r\n              pedido={pedido}\r\n              key={pedido.id}\r\n              setObjPedido={setObjPedido}\r\n              />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default PedidosTabla","import React, { Fragment, useEffect, useState } from 'react'\r\nimport PedidoForm from './componentes/PedidoForm'\r\nimport PedidosTabla from './componentes/PedidosTabla';\r\nimport Cargando from '../../componentes/Cargando';\r\n\r\n\r\nconst Pedidos = () => {\r\n\r\n    const endpoint = \"https://5ec86498155c130016a909dd.mockapi.io/pedido\";\r\n    const [cargando, setCargando] = useState(true);\r\n    const [pedidos, setPedidos] = useState([]);\r\n\r\n    const [objPedido, setObjPedido] = useState(null);\r\n\r\n    const getPedidos = () => {\r\n        if (!cargando) {\r\n            setCargando(true);\r\n        }\r\n        fetch(endpoint).then((response) => {\r\n            response.json().then((data) => {\r\n                setCargando(false);\r\n                setPedidos(data);\r\n            })\r\n        })\r\n\r\n    }\r\n        useEffect(() => {\r\n            getPedidos();\r\n        }, [])\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-8\">\r\n                        <PedidoForm getPedidos={getPedidos} objPedido={objPedido} setObjPedido={setObjPedido} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-md-8\">\r\n                        {\r\n                            cargando === true ?\r\n                                <Cargando tipo=\"info\" texto=\"Cargando pedidos\" /> :\r\n                                <PedidosTabla pedidos={pedidos}\r\n                                    setObjPedido={setObjPedido} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n}\r\n\r\n    export default Pedidos\r\n","import React, {useEffect, useState} from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\n\r\nconst RepartidorFila = ({repartidor, numero, setObjRepartidor}) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const putRepartidor = () => {\r\n\r\n        let nuevoRepartidor = { ...repartidor };\r\n        // Al nuevo repartidor le colocamos el estado contrario\r\n        // al que tiene en el componente actualmente,\r\n        // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n        // rep_est => mandamos la negacion del estado actual\r\n        // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n        // contemplando\r\n        nuevoRepartidor.rep_est = !checked + \"\";\r\n    \r\n        const endpoint = `${URL_BACKEND}/repartidor/${repartidor.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(nuevoRepartidor)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            console.log(data);\r\n    \r\n            // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n            // ESTADO EN LA BD\r\n            // En consecuencia, ya podemos hacer el cambio de estao local\r\n            // lo que generará un cambio visual para que el usuario\r\n            // vea el DOM actualizado.\r\n            setChecked(!checked);\r\n          })\r\n        })\r\n      }\r\n    \r\n    \r\n      useEffect(() => {\r\n        if (repartidor.rep_est === \"true\") {\r\n          setChecked(true);\r\n        }\r\n      }, []);\r\n    return (\r\n        <tr>\r\n        <td>{numero}</td>\r\n        <td>{repartidor.id}</td>\r\n        <td>{repartidor.rep_nom}</td>\r\n        <td>{repartidor.rep_ape}</td>\r\n        <td>\r\n          {\r\n            checked ?\r\n              <span className=\"badge badge-success\">Habilitado</span> :\r\n              <span className=\"badge badge-danger\">Inhabilitado</span>\r\n          }\r\n          <Switch\r\n            checked={checked}\r\n            onChange={putRepartidor} />\r\n  \r\n        </td>\r\n        <td>{repartidor.rep_dni}</td>\r\n        <td>\r\n        {/* <button className=\"btn btn-info\">Editar</button> */}\r\n          <button className=\"btn btn-info\" onClick={() => {\r\n            setObjRepartidor(repartidor);\r\n          }}>\r\n            Editar\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default RepartidorFila\r\n","import React from 'react'\r\nimport RepartidorFila from './RepartidorFila'\r\n\r\nconst RepartidoresTabla = ({repartidores, setObjRepartidor}) => {\r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Apellido</th>\r\n          <th>Estado</th>\r\n          <th>Dni</th>\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          repartidores.map((repartidor, i) => {\r\n            return <RepartidorFila numero={i}\r\n              repartidor={repartidor}\r\n              key={repartidor.id}\r\n              setObjRepartidor={setObjRepartidor}\r\n              />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default RepartidoresTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\nconst RepartidorForm = ({ getRepartidores, setObjRepartidor, objRepartidor }) => {\r\n    let formVacio = {\r\n        rep_nom: '',\r\n        rep_ape: '',\r\n        rep_est: '',\r\n        rep_dni: ''\r\n    };\r\n\r\n    const [formulario, setFormulario] = useState({});\r\n\r\n    useEffect(() => {\r\n        console.log(\"efecto objRepartidor\");\r\n        if (objRepartidor) {\r\n            setFormulario(objRepartidor);\r\n        } else {\r\n            setFormulario(formVacio)\r\n        }\r\n    }, [objRepartidor])\r\n\r\n    // console.log(\"state form\", formulario);\r\n\r\n    const handleChange = (e) => {\r\n        setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n\r\n    }\r\n    // console.log(formulario);\r\n\r\n\r\n    //crear nuevo Repartidor\r\n    const postRepartidor = (nuevoRepartidor) => {\r\n        const endpoint = `${URL_BACKEND}/repartidor`;\r\n        fetch(endpoint, {\r\n            method: 'POST',\r\n            body: JSON.stringify(nuevoRepartidor),\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            }\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                Swal.fire({\r\n                    title: 'Éxito!',\r\n                    icon: 'success',\r\n                    text: 'El Repartidor ha sido creado con éxito en la base de datos',\r\n                    timer: 2000,\r\n                });\r\n                getRepartidores();\r\n            })\r\n        })\r\n    }\r\n\r\n    // actualizando un repartidor\r\n    const putRepartidor = (nuevoRepartidor) => {\r\n        const endpoint = `${URL_BACKEND}/repartidor/${objRepartidor.id}`;\r\n        fetch(endpoint, {\r\n            method: 'PUT',\r\n            headers: { \"Content-type\": \"application/json\" },\r\n            body: JSON.stringify(nuevoRepartidor)\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                Swal.fire({\r\n                    title: \"Actualizado!\",\r\n                    text: \"Registro actualizado correctamente\",\r\n                    icon: \"success\",\r\n                    timer: 1500\r\n                });\r\n                // limpiar el form\r\n                getRepartidores();\r\n                setObjRepartidor(null);\r\n            })\r\n        })\r\n    }\r\n    //ENVIANDO NUEVO REPARTIDOR PARA SU CREACION\r\n    const enviarFormulario = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (formulario.rep_nom.trim() === \"\" ||\r\n            formulario.rep_ape.trim() === \"\" ||\r\n            formulario.rep_dni.trim() === \"\" ||\r\n            formulario.rep_est.trim() === \"\") {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Cuidado!\",\r\n                text: \"Todos los campos deben estar llenos\"\r\n            });\r\n        } else {\r\n            if (objRepartidor) {\r\n                // tengo editar el registro\r\n                // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n                Swal.fire({\r\n                    title: '¿Seguro que desea editar el registro?',\r\n                    icon: 'info',\r\n                    text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                    showCancelButton: true\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        console.log(\"OK PODEMOS EDITAR AL REPARTIDOR\");\r\n                        putRepartidor(formulario);\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                //tengo crear el registro\r\n                Swal.fire({\r\n                    title: '¿Seguro que desea crear el registro?',\r\n                    icon: 'info',\r\n                    text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                    showCancelButton: true\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                        // stuff PARA CREAR AL USUARIO\r\n                        // aqui hacemos un POST  a mockapi\r\n                        postRepartidor(formulario);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <div className=\"card\">\r\n            <div className=\"card-header\">\r\n                <h3 className=\"card-title\">Registrar Repartidor</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <form className=\"row\" onSubmit={enviarFormulario}>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Nombre:</label>\r\n                        <input type=\"text\" name=\"rep_nom\" className=\"form-control\" onChange={handleChange} value={formulario.rep_nom} />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Apellido:</label>\r\n                        <input type=\"text\" name=\"rep_ape\" className=\"form-control\" onChange={handleChange} value={formulario.rep_ape} />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Estado:</label>\r\n                        <select className=\"form-control\" name=\"rep_est\" onChange={handleChange} value={formulario.rep_est}>\r\n                            <option value=\"\">-Seleccione-</option>\r\n                            <option value=\"true\">Habilitado</option>\r\n                            <option value=\"false\">Inhabilitado</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Dni:</label>\r\n                        <input type=\"text\" name=\"rep_dni\" className=\"form-control\" onChange={handleChange} value={formulario.rep_dni} />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"form-group col-md-6\">\r\n                        {objRepartidor ?\r\n                            <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                                Actualizar Repartidor\r\n                             </button> :\r\n                            <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                Crear Repartidor\r\n                             </button>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group col-md-6\">\r\n                        <button className=\"btn btn-danger btn-block\" type=\"submit\">\r\n                            Cancelar\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default RepartidorForm\r\n","import React, { useEffect, useState, Fragment } from 'react'\r\nimport Cargando from '../../componentes/Cargando';\r\nimport RepartidoresTabla from './componentes/RepartidoresTabla';\r\nimport RepartidorForm from './componentes/RepartidorForm';\r\n\r\nconst Repartidores = () => {\r\n\r\n    const endpoint = \"https://5ec86498155c130016a909dd.mockapi.io/repartidor\";\r\n    const [cargando, setCargando] = useState(true);\r\n    const [repartidores, setRepartidores] = useState([]);\r\n\r\n    const [objRepartidor, setObjRepartidor] = useState(null);\r\n\r\n    const getRepartidores = () => {\r\n        if (!cargando) {\r\n            setCargando(true);\r\n        }\r\n        fetch(endpoint).then((response) => {\r\n            response.json().then((data) => {\r\n                setCargando(false);\r\n                setRepartidores(data);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRepartidores();\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-8\">\r\n                    <RepartidorForm getRepartidores={getRepartidores} objRepartidor={objRepartidor} setObjRepartidor={setObjRepartidor}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-8\">\r\n                    {\r\n                        cargando === true ?\r\n                            <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n                            <RepartidoresTabla repartidores={repartidores} \r\n                            setObjRepartidor={setObjRepartidor}\r\n                            />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default Repartidores\r\n","import React, {useEffect, useState} from 'react'\r\nimport Switch from 'react-switch'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\n\r\nconst ProductoFila = ({producto, numero, setObjProducto}) => {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const putProducto = () => {\r\n\r\n        let nuevoProducto = { ...producto };\r\n        // Al nuevo proartidor le colocamos el estado contrario\r\n        // al que tiene en el componente actualmente,\r\n        // ESTO SE DA PORQUE SI NO ES TRUE, ES FALSE (dicotomico)\r\n        // rep_est => mandamos la negacion del estado actual\r\n        // pero l o convertimos a STRING porque es el formato del campo que estamos\r\n        // contemplando\r\n        nuevoProducto.pro_est = !checked + \"\";\r\n    \r\n        const endpoint = `${URL_BACKEND}/producto/${producto.id}`;\r\n        fetch(endpoint, {\r\n          method: 'PUT',\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify(nuevoProducto)\r\n        }).then((response) => {\r\n          response.json().then((data) => {\r\n            console.log(data);\r\n    \r\n            // AQUI NOS ASEGURAMOS DE QUE EL REPARTIDOR, HA CAMBIADO SU \r\n            // ESTADO EN LA BD\r\n            // En consecuencia, ya podemos hacer el cambio de estao local\r\n            // lo que generará un cambio visual para que el usuario\r\n            // vea el DOM actualizado.\r\n            setChecked(!checked);\r\n          })\r\n        })\r\n      }\r\n    \r\n    \r\n      useEffect(() => {\r\n        if (producto.pro_est === \"true\") {\r\n          setChecked(true);\r\n        }\r\n      }, []);\r\n    return (\r\n        <tr>\r\n        <td>{numero}</td>\r\n        <td>{producto.id}</td>\r\n        <td>{producto.pro_nom}</td>\r\n        <td>{producto.pro_pre}</td>\r\n        <td>\r\n          {\r\n            checked ?\r\n              <span className=\"badge badge-success\">Habilitado</span> :\r\n              <span className=\"badge badge-danger\">Inhabilitado</span>\r\n          }\r\n          <Switch\r\n            checked={checked}\r\n            onChange={putProducto} />\r\n  \r\n        </td>\r\n        {/* <td>{producto.pro_dni}</td> */}\r\n        <td>\r\n        {/* <button className=\"btn btn-info\">Editar</button> */}\r\n          <button className=\"btn btn-info\" onClick={() => {\r\n            setObjProducto(producto);\r\n          }}>\r\n            Editar\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n}\r\n\r\nexport default ProductoFila","import React, {Fragment} from 'react'\r\n// import RepartidorFila from './RepartidorFila'\r\nimport ProductoFila from './ProductoFila'\r\n\r\nconst ProductosTabla = ({productos, setObjProducto}) => {\r\n    return (\r\n        <table className=\"table table-hover table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th><strong>#</strong></th>\r\n          <th>Id</th>\r\n          <th>Nombre</th>\r\n          <th>Precio</th>\r\n          <th>Estado</th>\r\n          {/* <th>Dni</th> */}\r\n          <th>Acciones</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          productos.map((producto, i) => {\r\n            return <ProductoFila numero={i}\r\n              producto={producto}\r\n              key={producto.id}\r\n              setObjProducto={setObjProducto}\r\n              />\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n    )\r\n}\r\n\r\nexport default ProductosTabla\r\n","import React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { URL_BACKEND } from '../../../variables/Variable';\r\n\r\nconst ProductoForm = ({ getProductos, setObjProducto, objProducto }) => {\r\n    let formVacio = {\r\n        pro_nom: '',\r\n        pro_pre: '',\r\n        pro_est: ''\r\n        // pro_dni: ''\r\n    };\r\n\r\n    const [formulario, setFormulario] = useState({});\r\n\r\n    useEffect(() => {\r\n        console.log(\"efecto objProducto\");\r\n        if (objProducto) {\r\n            setFormulario(objProducto);\r\n        } else {\r\n            setFormulario(formVacio)\r\n        }\r\n    }, [objProducto])\r\n\r\n    // console.log(\"state form\", formulario);\r\n\r\n    const handleChange = (e) => {\r\n        setFormulario({ ...formulario, [e.target.name]: e.target.value })\r\n\r\n    }\r\n    // console.log(formulario);\r\n\r\n\r\n    //crear nuevo Repartidor\r\n    const postProducto = (nuevoProducto) => {\r\n        const endpoint = `${URL_BACKEND}/producto`;\r\n        fetch(endpoint, {\r\n            method: 'POST',\r\n            body: JSON.stringify(nuevoProducto),\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            }\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                Swal.fire({\r\n                    title: 'Éxito!',\r\n                    icon: 'success',\r\n                    text: 'El producto ha sido creado con éxito en la base de datos',\r\n                    timer: 2000,\r\n                });\r\n                getProductos();\r\n            })\r\n        })\r\n    }\r\n\r\n    // actualizando un repartidor\r\n    const putProducto = (nuevoProducto) => {\r\n        const endpoint = `${URL_BACKEND}/producto/${objProducto.id}`;\r\n        fetch(endpoint, {\r\n            method: 'PUT',\r\n            headers: { \"Content-type\": \"application/json\" },\r\n            body: JSON.stringify(nuevoProducto)\r\n        }).then((response) => {\r\n            response.json().then((data) => {\r\n                Swal.fire({\r\n                    title: \"Actualizado!\",\r\n                    text: \"Registro actualizado correctamente\",\r\n                    icon: \"success\",\r\n                    timer: 1500\r\n                });\r\n                // limpiar el form\r\n                getProductos();\r\n                setObjProducto(null);\r\n            })\r\n        })\r\n    }\r\n    //ENVIANDO NUEVO REPARTIDOR PARA SU CREACION\r\n    const enviarFormulario = (e) => {\r\n        e.preventDefault()\r\n  // formulario.pro_dni.trim() === \"\" ||\r\n        if (formulario.pro_nom.trim() === \"\" ||\r\n            formulario.pro_pre.trim() === \"\" ||\r\n            formulario.pro_est.trim() === \"\") {\r\n            Swal.fire({\r\n                icon: \"error\",\r\n                title: \"Cuidado!\",\r\n                text: \"Todos los campos deben estar llenos\"\r\n            });\r\n        } else {\r\n            if (objProducto) {\r\n                // tengo editar el registro\r\n                // LLAMADA A LA API CON EL VERBO PUT (fetch)\r\n                Swal.fire({\r\n                    title: '¿Seguro que desea editar el registro?',\r\n                    icon: 'info',\r\n                    text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                    showCancelButton: true\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        console.log(\"OK PODEMOS EDITAR AL PRODUCTO\");\r\n                        putProducto(formulario);\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n                //tengo crear el registro\r\n                Swal.fire({\r\n                    title: '¿Seguro que desea crear el registro?',\r\n                    icon: 'info',\r\n                    text: 'Los cambios harán efecto de inmediato en la base de datos',\r\n                    showCancelButton: true\r\n                }).then((result) => {\r\n                    if (result.value) {\r\n                        console.log(\"OK PODEMOS CREAR AL USUARIO\");\r\n                        // stuff PARA CREAR AL USUARIO\r\n                        // aqui hacemos un POST  a mockapi\r\n                        postProducto(formulario);\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <div className=\"card\">\r\n            <div className=\"card-header\">\r\n                <h3 className=\"card-title\">Registrar Producto</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <form className=\"row\" onSubmit={enviarFormulario}>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Nombre:</label>\r\n                        <input type=\"text\" name=\"pro_nom\" className=\"form-control\" onChange={handleChange} value={formulario.pro_nom} />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Precio:</label>\r\n                        <input type=\"text\" name=\"pro_pre\" className=\"form-control\" onChange={handleChange} value={formulario.pro_pre} />\r\n                    </div>\r\n                    <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Estado:</label>\r\n                        <select className=\"form-control\" name=\"pro_est\" onChange={handleChange} value={formulario.pro_est}>\r\n                            <option value=\"\">-Seleccione-</option>\r\n                            <option value=\"true\">Habilitado</option>\r\n                            <option value=\"false\">Inhabilitado</option>\r\n                        </select>\r\n                    </div>\r\n                    {/* <div className=\"form-group col-md-3\">\r\n                        <label htmlFor=\"\">Dni:</label>\r\n                        <input type=\"text\" name=\"pro_dni\" className=\"form-control\" onChange={handleChange} value={formulario.pro_dni} />\r\n                    </div> */}\r\n\r\n\r\n                    <div className=\"form-group col-md-6\">\r\n                        {objProducto ?\r\n                            <button className=\"btn btn-success btn-block\" type=\"submit\">\r\n                                Actualizar Producto\r\n                             </button> :\r\n                            <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                Crear Producto\r\n                             </button>\r\n                        }\r\n                    </div>\r\n                    <div className=\"form-group col-md-6\">\r\n                        <button className=\"btn btn-danger btn-block\" type=\"submit\">\r\n                            Cancelar\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProductoForm\r\n","import React, {useState, useEffect, Fragment} from 'react'\r\nimport ProductosTabla from './componentes/ProductosTabla';\r\nimport Cargando from '../../componentes/Cargando';\r\nimport ProductoForm from './componentes/ProductoForm';\r\n\r\nconst Productos = () => {\r\n    const endpoint = \"https://5ec86498155c130016a909dd.mockapi.io/producto\";\r\n    const [cargando, setCargando] = useState(true);\r\n    const [productos, setProductos] = useState([]);\r\n\r\n    const [objProducto, setObjProducto] = useState(null);\r\n\r\n    const getProductos = () => {\r\n        if (!cargando) {\r\n            setCargando(true);\r\n        }\r\n        fetch(endpoint).then((response) => {\r\n            response.json().then((data) => {\r\n                setCargando(false);\r\n                setProductos(data);\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProductos();\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-md-8\">\r\n                < ProductoForm getProductos={getProductos} objProducto={objProducto} setObjProducto={setObjProducto}/>\r\n            </div>\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-md-8\">\r\n                {\r\n                    cargando === true ?\r\n                        <Cargando tipo=\"info\" texto=\"Cargando repartidores\" /> :\r\n                        <ProductosTabla productos={productos} \r\n                        setObjProducto={setObjProducto}\r\n                        />\r\n                }\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default Productos\r\n","import React from 'react'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n          Home\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n    return (\r\n       <header>\r\n           <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\r\n               <a className=\"navbar-brand\" href=\"!#\">Pedidos</a>\r\n               <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"!#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n                   aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n               <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                   <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                       <li className=\"nav-item active\">\r\n                       <Link to={\"/clientes\"} className=\"nav-link\">Clientes</Link>\r\n                       </li>\r\n                       <li className=\"nav-item\">\r\n                       <Link to={\"/productos\"} className=\"nav-link\">Productos</Link>\r\n                       </li>\r\n                       <li className=\"nav-item\">\r\n                       <Link to={\"/pedidos\"} className=\"nav-link\">Pedidos</Link>\r\n                       </li>\r\n                       <li className=\"nav-item\">\r\n                       <Link to={\"/repartidores\"} className=\"nav-link\">Repartidores</Link>\r\n                       </li>\r\n                   </ul>\r\n                \r\n               </div>\r\n           </nav>\r\n       </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from 'react-router-dom';\nimport { Clientes } from './paginas/clientes/Clientes';\nimport Pedidos from './paginas/pedidos/Pedidos';\nimport Repartidores from './paginas/repartidores/Repartidores';\nimport Productos from './paginas/productos/Productos';\nimport Home from './paginas/home/Home';\nimport Header from './componentes/Header';\n\nfunction App() {\n  return (\n    <Router>\n\n      <Header />\n\n      <main className=\"container-fluid pt-3\">\n        <Switch>\n          <Route path={\"/clientes\"} component={Clientes} />\n          <Route path={\"/pedidos\"} component={Pedidos} />\n          <Route path={\"/repartidores\"} component={Repartidores} />\n          <Route path={\"/productos\"} component={Productos} />\n          <Route path={\"/\"} component={Home} />\n        </Switch>\n      </main>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}